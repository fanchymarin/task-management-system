-- PostgreSQL dump for Django User model and Task model
-- Generated for development/testing purposes

-- First, let's insert some users following Django's User model structure
-- Note: Passwords are hashed using Django's PBKDF2 algorithm

-- Insert Users
INSERT INTO auth_user (id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined) VALUES
(1, 'pbkdf2_sha256$600000$randomsalt1$hashedpassword1', '2024-09-07 10:30:00+00:00', true, 'admin2', 'Juan', 'Pérez', 'admin@empresa.com', true, true, '2024-01-15 08:00:00+00:00'),
(2, 'pbkdf2_sha256$600000$randomsalt2$hashedpassword2', '2024-09-06 16:45:00+00:00', false, 'maria.garcia', 'María', 'García', 'maria.garcia@empresa.com', true, true, '2024-02-01 09:15:00+00:00'),
(3, 'pbkdf2_sha256$600000$randomsalt3$hashedpassword3', '2024-09-05 14:20:00+00:00', false, 'carlos.lopez', 'Carlos', 'López', 'carlos.lopez@empresa.com', false, true, '2024-02-10 11:30:00+00:00'),
(4, 'pbkdf2_sha256$600000$randomsalt4$hashedpassword4', '2024-09-04 09:10:00+00:00', false, 'ana.rodriguez', 'Ana', 'Rodríguez', 'ana.rodriguez@empresa.com', false, true, '2024-02-15 10:45:00+00:00'),
(5, 'pbkdf2_sha256$600000$randomsalt5$hashedpassword5', '2024-09-03 13:55:00+00:00', false, 'david.martinez', 'David', 'Martínez', 'david.martinez@empresa.com', false, true, '2024-02-20 14:20:00+00:00'),
(6, 'pbkdf2_sha256$600000$randomsalt6$hashedpassword6', '2024-09-02 11:30:00+00:00', false, 'laura.sanchez', 'Laura', 'Sánchez', 'laura.sanchez@empresa.com', false, true, '2024-02-25 16:10:00+00:00'),
(7, 'pbkdf2_sha256$600000$randomsalt7$hashedpassword7', '2024-09-01 15:20:00+00:00', false, 'miguel.torres', 'Miguel', 'Torres', 'miguel.torres@empresa.com', false, false, '2024-03-01 12:00:00+00:00'),
(8, 'pbkdf2_sha256$600000$randomsalt8$hashedpassword8', '2024-08-31 17:40:00+00:00', false, 'sofia.ruiz', 'Sofía', 'Ruiz', 'sofia.ruiz@empresa.com', false, true, '2024-03-05 13:25:00+00:00');

-- Create a basic Tag table structure (referenced by Task model)
CREATE TABLE IF NOT EXISTS app_tag (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE,
    color VARCHAR(7) DEFAULT '#007bff',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Insert some tags
INSERT INTO app_tag (id, name, color) VALUES
(1, 'frontend', '#28a745'),
(2, 'backend', '#dc3545'),
(3, 'database', '#ffc107'),
(4, 'testing', '#17a2b8'),
(5, 'documentation', '#6f42c1'),
(6, 'bugfix', '#fd7e14'),
(7, 'feature', '#20c997'),
(8, 'urgent', '#e83e8c');

-- Create Task table structure
CREATE TABLE IF NOT EXISTS app_task (
    id SERIAL PRIMARY KEY,
    title VARCHAR(200) NOT NULL,
    description TEXT NOT NULL,
    status VARCHAR(20) NOT NULL,
    priority VARCHAR(10) NOT NULL,
    due_date TIMESTAMP WITH TIME ZONE NOT NULL,
    estimated_hours DECIMAL(5,2) NOT NULL,
    actual_hours DECIMAL(5,2) NULL,
    created_by_id INTEGER NOT NULL REFERENCES auth_user(id),
    parent_task_id INTEGER NULL REFERENCES app_task(id),
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    is_archived BOOLEAN DEFAULT FALSE
);

-- Insert Tasks
INSERT INTO app_task (id, title, description, status, priority, due_date, estimated_hours, actual_hours, created_by_id, parent_task_id, metadata) VALUES
(1, 'Implementar sistema de autenticación', 'Desarrollar el sistema completo de login y registro de usuarios con validaciones de seguridad', 'in_progress', 'high', '2024-09-15 23:59:59+00:00', 40.00, 25.50, 1, NULL, '{"complexity": "high", "technologies": ["Django", "JWT", "PostgreSQL"]}'),
(2, 'Diseñar base de datos', 'Crear el esquema completo de la base de datos con todas las relaciones necesarias', 'completed', 'high', '2024-08-30 23:59:59+00:00', 20.00, 18.75, 2, NULL, '{"diagrams_created": true, "reviewed_by": "senior_architect"}'),
(3, 'Desarrollar API REST', 'Implementar endpoints para CRUD de usuarios y tareas', 'pending', 'medium', '2024-09-20 23:59:59+00:00', 35.00, NULL, 3, NULL, '{"framework": "Django REST Framework", "documentation": "OpenAPI"}'),
(4, 'Crear frontend con React', 'Desarrollar interfaz de usuario moderna y responsive', 'in_progress', 'medium', '2024-09-25 23:59:59+00:00', 50.00, 12.25, 4, NULL, '{"ui_library": "Material-UI", "state_management": "Redux"}'),
(5, 'Implementar tests unitarios', 'Crear suite completa de tests para backend', 'pending', 'medium', '2024-09-18 23:59:59+00:00', 25.00, NULL, 5, 1, '{"coverage_target": "90%", "testing_framework": "pytest"}'),
(6, 'Configurar CI/CD', 'Establecer pipeline de integración y despliegue continuo', 'pending', 'low', '2024-09-30 23:59:59+00:00', 15.00, NULL, 1, NULL, '{"platform": "GitHub Actions", "environments": ["staging", "production"]}'),
(7, 'Optimizar consultas de base de datos', 'Identificar y optimizar queries lentas', 'completed', 'high', '2024-09-01 23:59:59+00:00', 12.00, 14.50, 2, 2, '{"tools_used": ["Django Debug Toolbar", "pg_stat_statements"]}'),
(8, 'Documentar API', 'Crear documentación completa de endpoints', 'in_progress', 'low', '2024-09-22 23:59:59+00:00', 8.00, 3.00, 6, 3, '{"format": "Swagger/OpenAPI", "examples_included": true}'),
(9, 'Resolver bug en login', 'Corregir error de validación en formulario de login', 'completed', 'urgent', '2024-09-05 23:59:59+00:00', 4.00, 2.75, 7, 1, '{"bug_id": "BUG-001", "affected_browsers": ["Safari", "Firefox"]}'),
(10, 'Implementar notificaciones push', 'Añadir sistema de notificaciones en tiempo real', 'pending', 'low', '2024-10-10 23:59:59+00:00', 30.00, NULL, 8, NULL, '{"technology": "WebSockets", "fallback": "polling"}'),
(11, 'Migrar a PostgreSQL 15', 'Actualizar base de datos a la última versión estable', 'pending', 'medium', '2024-09-28 23:59:59+00:00', 10.00, NULL, 2, NULL, '{"backup_strategy": "pg_dump", "downtime_window": "weekend"}'),
(12, 'Crear dashboard de métricas', 'Implementar panel de control con estadísticas del sistema', 'in_progress', 'low', '2024-10-05 23:59:59+00:00', 20.00, 8.00, 4, NULL, '{"charts_library": "Chart.js", "real_time": true}');

-- Create many-to-many relationship tables

-- Task assigned users (many-to-many)
CREATE TABLE IF NOT EXISTS app_task_assigned_to (
    id SERIAL PRIMARY KEY,
    task_id INTEGER NOT NULL REFERENCES app_task(id),
    user_id INTEGER NOT NULL REFERENCES auth_user(id),
    UNIQUE(task_id, user_id)
);

-- Insert task assignments
INSERT INTO app_task_assigned_to (task_id, user_id) VALUES
(1, 3), (1, 4),  -- Authentication task assigned to Carlos and Ana
(2, 2),          -- Database design assigned to María
(3, 3), (3, 5),  -- API development assigned to Carlos and David
(4, 4), (4, 6),  -- Frontend assigned to Ana and Laura
(5, 5),          -- Testing assigned to David
(6, 1),          -- CI/CD assigned to admin
(7, 2),          -- DB optimization assigned to María
(8, 6),          -- API documentation assigned to Laura
(9, 7),          -- Bug fix assigned to Miguel
(10, 8),         -- Push notifications assigned to Sofía
(11, 2),         -- PostgreSQL migration assigned to María
(12, 4), (12, 8); -- Dashboard assigned to Ana and Sofía

-- Task tags (many-to-many)
CREATE TABLE IF NOT EXISTS app_task_tags (
    id SERIAL PRIMARY KEY,
    task_id INTEGER NOT NULL REFERENCES app_task(id),
    tag_id INTEGER NOT NULL REFERENCES app_tag(id),
    UNIQUE(task_id, tag_id)
);

-- Insert task-tag relationships
INSERT INTO app_task_tags (task_id, tag_id) VALUES
(1, 2), (1, 7),     -- Authentication: backend, feature
(2, 3), (2, 7),     -- Database: database, feature
(3, 2), (3, 7),     -- API: backend, feature
(4, 1), (4, 7),     -- Frontend: frontend, feature
(5, 4),             -- Testing: testing
(6, 2),             -- CI/CD: backend
(7, 3), (7, 2),     -- DB optimization: database, backend
(8, 5),             -- Documentation: documentation
(9, 6), (9, 8),     -- Bug fix: bugfix, urgent
(10, 2), (10, 7),   -- Notifications: backend, feature
(11, 3),            -- Migration: database
(12, 1), (12, 7);   -- Dashboard: frontend, feature

-- Update sequences to match inserted data
SELECT setval('auth_user_id_seq', 8, true);
SELECT setval('app_tag_id_seq', 8, true);
SELECT setval('app_task_id_seq', 12, true);

-- Add some indexes for better performance
CREATE INDEX IF NOT EXISTS idx_task_status ON app_task(status);
CREATE INDEX IF NOT EXISTS idx_task_priority ON app_task(priority);
CREATE INDEX IF NOT EXISTS idx_task_due_date ON app_task(due_date);
CREATE INDEX IF NOT EXISTS idx_task_created_by ON app_task(created_by_id);
CREATE INDEX IF NOT EXISTS idx_task_assigned_task ON app_task_assigned_to(task_id);
CREATE INDEX IF NOT EXISTS idx_task_assigned_user ON app_task_assigned_to(user_id);