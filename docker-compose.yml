services:
  postgres:
    build:
      context: .
      dockerfile: images/postgres/Dockerfile
    env_file: .env
    environment:
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      PGUSER: $POSTGRES_USERNAME
    healthcheck:
      interval: 1s
      retries: 5
      test: ["CMD-SHELL", "pg_isready"]
      timeout: 5s
    hostname: postgres
    restart: always
    shm_size: 128mb
    volumes:
      - postgres-data:/var/lib/postgresql/data

  django:
    build:
      context: django_backend/
    env_file: .env
    environment:
      DJANGO_SUPERUSER_EMAIL: $DJANGO_SUPERUSER_EMAIL
      DJANGO_SUPERUSER_USERNAME: $DJANGO_SUPERUSER_USERNAME
      DJANGO_SUPERUSER_PASSWORD: $DJANGO_SUPERUSER_PASSWORD
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - ${DJANGO_PORT}:8000
    restart: always
    volumes:
      - ./django_backend:/app
  
  redis:
    build:
      context: .
      dockerfile: images/redis/Dockerfile
    hostname: redis
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 5
    volumes:
      - redis-data:/data
      
  # celery-worker:
  #   build:
  #     context: django_backend/
  #   env_file: .env
  #   command: celery -A task_management worker --loglevel=info
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     django:
  #       condition: service_healthy
  #   volumes:
  #     - ./django_backend:/app
  #   restart: always
    
  # celery-beat:
  #   build:
  #     context: django_backend/
  #   env_file: .env
  #   command: celery -A task_management beat --loglevel=info
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     django:
  #       condition: service_healthy
  #   volumes:
  #     - ./django_backend:/app
  #   restart: always

volumes:
  postgres-data:
  redis-data:

